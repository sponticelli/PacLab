using UnityEngine;

namespace Ludo.Singletons
{
    /// <summary>
    /// Unity MonoBehaviour singleton with configurable persistence
    /// </summary>
    public abstract class MonoBehaviourSingleton<T> : MonoBehaviour where T : MonoBehaviourSingleton<T>
    {
        private static T _instance;
        
        /// <summary>
        /// Override to control whether this singleton persists across scenes
        /// </summary>
        protected virtual bool IsPersistent => true;
        
        protected bool IsInitialized;
        
        public static T Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = FindFirstObjectByType<T>();
                    
                    if (_instance == null)
                    {
                        var go = new GameObject(typeof(T).Name + " (AutoGenerated)");
                        _instance = go.AddComponent<T>();
                        _instance.Initialize();
                    }
                }
                return _instance;
            }
        }
        
        protected virtual void Awake()
        {
            if (_instance == null)
            {
                _instance = (T)this;
                
                if (IsPersistent)
                {
                    transform.SetParent(null);
                    DontDestroyOnLoad(gameObject);
                }
                
                Initialize();
            }
            else if (_instance != this)
            {
                Destroy(gameObject);
            }
        }

        /// <summary>
        /// Called once when the singleton instance is created
        /// </summary>
        protected virtual void Initialize()
        {
            if (IsInitialized)
                return;
            
            IsInitialized = true;
        }
    }
}